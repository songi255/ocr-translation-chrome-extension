(()=>{"use strict";const e=new class{capture(e,t){const o=e.devicePixelRatio,n=Math.min(e.sx,e.ex)*o,s=Math.min(e.sy,e.ey)*o,a=Math.max(e.sx,e.ex)*o,r=Math.max(e.sy,e.ey)*o,c=a-n,i=r-s;if(0==c||0==i)throw new Error("capture region can't be zero size.");chrome.tabs.captureVisibleTab({format:"png"},(async e=>{const a=new OffscreenCanvas(c/o,i/o),r=a.getContext("2d");if(!r)throw new Error("can not make canvas context");const m=await fetch(e),l=await m.blob(),u=await createImageBitmap(l);r.drawImage(u,n,s,c,i,0,0,c/o,i/o);const h=await a.convertToBlob();t(h)}))}};let t;chrome.runtime.onMessage.addListener(((o,n,s)=>(console.log("service worker recieved message from content.js"),console.log(o),"request-operation"===o.eventType?(e.capture(o.cropPos,(e=>{console.log(e);const o=new FileReader;o.readAsDataURL(e),o.onloadend=()=>{const e=o.result;(async function(e){const o=chrome.runtime.getURL(e);(await chrome.runtime.getContexts({contextTypes:["OFFSCREEN_DOCUMENT"],documentUrls:[o]})).length>0||(t||(t=chrome.offscreen.createDocument({url:e,reasons:[chrome.offscreen.Reason.BLOBS],justification:"tesseract uses URL.createObjectUrl() method"})),await t,t=null)})("offscreen.html").then((()=>{chrome.runtime.sendMessage({eventType:"request-ocr",base64:e},(t=>{s({base64:e,text:t.text})}))}))}})),!0):"response-ocr"===o.eventType?(console.log(o.text),!0):void 0)))})();